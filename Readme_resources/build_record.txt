The Build record is to keep a track of the steps followed in the creation of this project. This happens for two reasons :
-1. To support version control and track the progress and/or current status of the project.
-2. For future record to keep a log of the events involved in creating the site. 


Chapter 1
    - create git repository using code institute template
    - create initial mock-up wireframes on Balsamiq as guidelines
    - Select color scheme and font choices for project
    - Create style.html and colors.css to display color chart and fonts. 
    - Begin Readme file
    - Initial Commit
    - pip3 install Django
    - django-admin startproject far_east_cc .
    - touch .gitignore to safely hold *.sqlite and *.pyc and __pycache__  
    - python3 manage.py runserver to view the server opening on port 8000
    - python3 manage.py migrate to run the initial migrations
    - python3 manage.py createsuperuser to create an Admin log-in and password.
    - Commit work thus far. 

Chapter 2
    - Django Allauth for creating user authentication, registration and account management.
    - pip3 install django-allauth
    - update settings.py with allauth requirements in INSTALLED_APPS
    - under authentication backends, add : SITE_ID = 1 
    - add : "import path, include" & path('accounts', include ('allauth'.urls)) to urlpatterns in urls.py 
    - runserver
    - Navigate to admin (ignoring the first error message)
    - Under Sites change name to fecc.example.Com
    - Change Display name to FarEast CarCare for social media referencing
    - settings.py ... set EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'   (to temporarily log emails to console)
    - add email authentication for usernames & emails, mandatory email registration, minimum username length etc.
    - login redirect to "/success"
    - runserver, navigate to /accounts/login and try log in. Email Verification Message should be present. 
    - Return to admin login to enter and select email verified. 
    - navigate to /accounts/login and repeat. You will  get 404 but path sill be success in url
    - LOGIN_REDIRECT_URL = '/'  (remove success from url)
    - pip3 freeze > requirements.txt 
    - create templates/ allauth directories
    - Commit work thus far. 

Chapter 3
    - cp -r ../.pip-modules/lib/python3.8/site-packages/allauth/templates/* ./templates/allauth 
    - with the Allauth templates installed, remove tests and openid folders.
    -in the Templates folder, create base.html
    - include bootstrap starter template and the following meta in the head :
    -  <meta http-equivalent="X_UA-Compatible" content="ie=edge">
    - put {% load static %} at the top to load static files.
    - Commit work thus far
    - Create block/endblock jinja for core css and js in base.html
    - Also create blocks for page_header, content, postloadjs
    - Create if messages/endif in base.html
    - Commit work thus far
    - Create HOME app using python3 manage.py startapp home 
    - Create templates directory inside home with new index.html file
    - add extends 'base.html' and load static
    - Create tester h1 to check bootstrap, etc is working. 
    - In views.py define index view to render index template.
    - create a new urls.py in the home app and copy in all from the project urls.py 
    - in home urls.py use *urlpatterns = [path('', views.index, name='home') ]*
    - in project urls.py include the *path('', include('home.urls'))*
    - add home to installed apps in Settings. 
    - In Template Dirs setting, add home app and templates directory. 
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth')
    - Commit work thus far. 

Chapter 4
    - create static/css/base.css 
    - Move css color palette and fonts to main css file. 
    - create templates/home/index.html 
    - Begin Sliding nav-bar 
    - attach Font Awesome CDN in style links
    - Add global site styles to Headings, Paragraphs, Body etc for responsiveness. 
    - Commit work thus far. 
    - Base.html : Create Header bar to contain site tools such as search, shopping cart, login
    - Base.Html : Create Side-Sliding navbar separately for links.  
    - Retaining some Bootstrap for now, create Search form on header bar. 
    - Font Awesome User icon, create My Account link as bootstrap dropdown
    - Use logout, signup, login jinja on base.html to adopt Allauth URLs in the url.py file at project level.
    - Create shopping Cart icon with IF Grand Total jinja sequences to check for shopping activity. 
    -runserver shows all text and links, but no css yet.
*See bugs.txt #1 for fix.
    - fixed CSS and JS bug. 
    - updated base.html with less Bootstrap dependencies.
    - Commit work thus far


Chapter 5
- added CSS for index page.
- fixed slider Nav bar with JS
- Corrected urls.py to show content of MEDIA folder
- Update base.html
*See bugs.txt #2 for the fix details.
- Uploaded video for Landing page.
- Creating JS to display video with On/Off Switch
- Commit Work thus far
- Invoke responsiveness for headers and fonts and buttons on index page.
- Adjust colors away from Bootstrap Default.
- Upload background video
- Wire up On/Off Switch to JS and adjust Z-Index.
- Commit Work thus far

Chapter 6
- Adjust Burger-Icon for sidebar-toggle on mobile small screen.
- Replace video file with compressed version.
- Commit Work thus far.
- * Design Contention Point - Drop Down menu for categories doesn't suit.
- Redesigning Drop-down menu for better UX, delete CSS and JS code.
- Commit Work thus far. 
- Add Button for dropdown menu to show product Collection options
- Remove Font-Awesome icon for Account, change to button to match above.
- Create dropdown-menu for product collection. 3 columns.
- Collection dropdown will be full screen width.
- Adjust Bootstrap column sizes for responsiveness in different screens.
- Overwrite bootstrap Element.Style with !important for dropdown-menu transform.
- Commit Work thus far. 
- Update dropdown-menu class with additional ID to Overwrite bootstrap Element. Style with !important for dropdown-menu transform. Otherwise all classes affected!
- Commit Work thus far.

Chapter 7
- Add Row to hold "Free Delivery" text area
- Add CSS to provide text colors, style and size.
- Add JS to animate text in rotation
- Commit Work thus far. 
- Modify text size and layout for smaller screens
- Modify bars icon size for small screen
- Modify Free-Delivery Banner for size and position.
- Modify Padding on Shopping Cart Icon
- Commit Work thus far.

Chapter 8
- Copy across product images to media folder
- Create Products App : python3 manage.py startapp products.
- Add 'products' to INSTALLED_APPS in the main settings.py file
- Add Fixtures folder to products app : mkdir products/fixtures
- Add categories.json and products.json to fixtures folder
- Populate 8 categories and 14 products with json data
- Commit Work thus far
- Add more items to products.json. 20 items, but more needed progressively.
- Add more images to media folder & shorten file names.
- Commit Work thus far.

Chapter 9
- Populate products>models.py django product/category relationships
- Perform python3 manage.py makemigrations --dry-run 
- Dry Run fails due to Pillow not being installed (as per tutorial)
- pip3 install pillow
- Migration dry run successful.
- Check models before migrations with python3 manage.py migrate --plan
- All successful. ... so perform python3 manage.py migrate
- Register Product and Category models in admin.py
- Implement fixtures for categories and products using the following
- python3 manage.py loaddata categories
- python3 manage.py loaddata products 
- Run Server and log in to Admin panel  
- Admin panel shows Products and Categories are populated.
- Commit Work thus far. 

Chapter 10
- in models.py change to correct plural spelling of categories
- in admin.py, register the ProductAdmin and CategoryAdmin classes
- Order the columns by SKU (note: tuple)
- Commit Work thus far
- Build products views in products>views.py
- Create products>urls.py and import view for path to all_products
- Add url paths to project level urls.py for 'products/' & products.urls
- Create products template directory: mkdir -p products/templates/products
- Create products.html in templates/products folder
- Copy html from home>templates index.html and do runserver
- The /products page shows the products 
- Commit Work thus far

Chapter 11
- Updated index.html, base.html and products.html.
- Adjusted CSS and background colour. 
- Created initial card system for displaying product info.
- Commit Work thus far. 
- Updated links to Store in main menu and button link.
- Add product_detail view to products>views.py
- Create URL in products>urls.py
- Create product_detail.html template
- Update image links in template
- Adjust padding to body container 
- Commit Work thus far

Chapter 12
- Insert search url to searchbar, action = GET.
- Update products>views.py with search function
- Use : from django.db.models import Q  for django Q keyword arguments.
- Test Search function :  
- Search function displays with keywords from either Name or Description
- Commit Work thus far
- Insert url links to dropdown categories for Interior & Exterior
- Test filtering for all categories. Test successful. 
- Commit Work thus far.
- Add url links to sort by Price, Rating & Category in main dropdown
- In products>views.py provide Sort and Direction functionality if request.GET
- Test sorting by price, by rating & by category. Test successful.
- Commit Work thus far.
- Add jinja for Category display to products.html.
- Commit Work thus far

Chapter 13
- Product sorting created with Sort-Selector at top of products page
- Sorting objectives created with 10 main criteria for user to select
- Display number of products available at top of products page
- Return text confirming result of search with search-term mentioned
- Commit work thus far
- Update product>view.py to force sortkey to sort by name instead of ID
- Test sorting using products displayed by asc, desc. Test successful
- Test search for number of products in result and search term. Test successful.
- Commit Work thus far 
- Add JQuery to products.html to enable the mechanics of the sort functionality.
- Testing reveals that sorting by name exposes an error.
- To products>views.py add "from django.db.models.functions import Lower"
- Test all sorting categories individually. Test Successful.
- Commit Work thus far